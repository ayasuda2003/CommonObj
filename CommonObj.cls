/*
 * Author: Chia Chang
 * Developer: Chia Chang
 * Title: Common Usage Object
 * Description: A comprehensive tool for developers who shall be involved with Product Object and Address Object.
 * Ref#: 2.4
 * Open Issues (remove when resolved): N/A
 * Usage: See test Method.
 * API Version: Google Geocoding API v3. SFDC v26.0
 * Licensing: Mitchell International. GPL is available in Git format via SVN. Ask author for details.
 * Revisions' History:
 * 11.1.2012- Add Exception Handling Class.
 * 11.4.2012- Defining Interfaces for Business rules and pricing calculator.
 * 11.6.2012- Add Product Configurator Object class.
 * 11.7.2012- Implementing Exceptions Handling.
 * 11.8.2012- Engineering Annotations.
 * 11.9.2012- Add complete available products in Product Configurator.
 * 11.23.2012- Add functions to generate the opportunity products & promotions.
 * 11.26.2012- bug fixing and eliminate excessive codes.
 * 12.20.2012- Adding allowing only products and packages within a valid opportunity region.
 * 12.28.2012- Add Pre-Req products to add module method.
 * 01.01.2013- Add Coding Requirement.
 * 01.10.2013- Updated license unit source per Sarat
 * 01.10.2013- remove negative item from the cart. (Product Configurator)
 * 01.11.2013- Add Pre-Req Any 1 business rule
 */
 
global virtual without sharing class CommonObj {
	
	static final string revision = 'v2.4';
	public final static string[] developerEmails=new string[]{'chia.chang@mitchell.com','anupam.priyadarshi@mitchell.com',
																'venkata.kunisety@mitchell.com'};
		
	public CommonObj(){}
	
	global virtual interface IIntegration {
		String googleAPI(string endpoint);
		String corpAPI(string action);
	}
	
	global virtual interface IPricingCalculator {
		/* Depreciated */
		//decimal fetchPriceFromProductPricingMap(Boolean IsPackage, string product2Id, Integer noOfUsers);
		//decimal fetchPriceFromProductPricingMap(string product2Id);
		void loadPricingMap(map<string,PriceScheduleType> priceScheduleTypeObj);
		//decimal fetchPricingForProduct(string productId, string licenseUnit);
	
		//map<string,decimal> fetchPricingForProduct(string productId, string licenseUnit);
	
		/*
		decimal fetchUpfrontPayment(string product2Id, string licenseUnit);
		decimal fetchRecurringPayment(string product2Id, string licenseUnit);
		
		decimal applyPromoOnUpfrontPayment(set<string> promoIds,string product2Id, decimal price);
		decimal applyPromoOnRecurringPayment(set<string> promoIds,string product2Id, decimal price);
		*/

		//decimal fetchPricingForProduct(string product2Id, string licenseUnit, integer pLicenseQty);
		decimal fetchPricingForProduct(string product2Id, string licenseUnit, integer pLicenseQty);
		
		decimal fetchRecurringPayment(string product2Id, string licenseUnit, integer pLicenseQty);
		decimal fetchUpfrontPayment(string product2Id, string licenseUnit, integer pLicenseQty);
		decimal applyPromoOnUpfrontPayment(set<string> promoIDs,string product2Id, decimal upfrontPayment,integer licenseQty, integer termQty,decimal OrderAmount);
		decimal applyPromoOnRecurringPayment(set<string> promoIDs,string product2Id, decimal recurringPayment, integer licenseQty, integer termQty, decimal OrderAmount);

		
	}
	
	global virtual interface IProductBusinessRules {
		boolean isPackageForSelectedNumUsers(string productId, integer numUsers);
		boolean isPackageForSelectedContractTerms(string productId,integer contractTerm);
		integer getActualRecommendedQty(integer recommendedQty,integer maxQty, integer minQty, 
										string packageType, integer newQty);
		/* depleted - duplicate biz rules - Chia */
		integer getActualQtyByLicenseUnit(string productLicenseUnit, string OpportunityLicenseUnit, integer productMinQty, integer opportunityNumberUsers);								
		
		boolean isValidLicenseUnit(string product2Id, string oppLicenseUnit);							
		string actualCountryCode(string countryCode);
		
		/* Anupam to explain the biz logic */
		boolean isProductWithinValidLicenseQty(string productId, integer numUsers);
		boolean isProductWithinValidQuantityRangeinProdRelationShip(integer recommendedQty,integer maxQty, integer minQty, string packageType, integer newQty);
		
		/* Get QuantityType by examining the Product Relationship and Product UOM */
		CommonObj.QuantityType getQuantityListByProdRelORUOM(integer relMaxQty, integer relMinQty, integer relRecommendedQty, 
													string relLicenseUnit, string productId);
		/* checking if the product is an asset on the account */
		boolean isAnAssetOnAccount(string productId);
		// depleting
		//set<string> hasProductAPreReq(string productId);
		//set<string> hasProductAExclusion(string productId);
		//string[] getIncludedProduct(string productId, string[] productIds);
	}
	
	/* For Opportunity Developer */
	global virtual interface IOpportunityContent{
		//boolean generateOpportunityLineItem(Opportunity opp,map<string,string> bs,list<ProductMatrixObject> pmoList);
		boolean generateOpportunityPromo(Opportunity opp,set<string> promoIds);
		
		/****/
		boolean generateOpportunityLineItems(Opportunity opp,list<OpportunityLineItem> oppLineItem);
	}
	
	@isTest(SeeAllData=true)
    static void test(){
    	List<user> usrs=[select id,AccountId from user where Name='Chia Chang'];
    	system.runAs(usrs[0]){
			CommonObj cObj=new CommonObj();
			CommonObj.CommonException cEx=new CommonObj.CommonException();
			
			try {
				throw new CommonException('test',CommonObj.CommonExceptionType.DebugError);
			}
			catch (CommonException ex){ 
				cEx.notifyViaEmail(CommonObj.developerEmails);
			}
			
			CommonObj.AddressType aType=new CommonObj.AddressType();
			/* Library Coverage */
			CommonObj.CommonLib cLib1=new CommonObj.CommonLib();
			string str1=cLib1.corpAPI('select id from Account limit 1');
			str1=cLib1.googleAPI('1 infinite loop, cupertino');
			List<SelectOption> w10=cLib1.getPicklistValues(new Product2(),'m_Package_Type__c');
			// getting other picklist value instead	
			try{
				string[] abc=new string[]{'test1'};
				string def=abc[2];
			}
			catch (Exception ex){
				cLib1.notifyStandardExceptionViaEmail('test Exception',ex,CommonObj.developerEmails);
			}
			
			CommonObj.AddressObj addsObj=new CommonObj.AddressObj();
			Address__c addr=new Address__c(Street_1__c='6220 Greenwich Drive',City__c='San Diego',State__c='CA',
										 Zip__c='92122',Country__c='USA',Address_Type__c='Bill To');
			addsObj.addressValidation(addr);
			Map<integer,AddressType> op1=addsObj.parseGoogleGeocodingAddress('some address');
			List<Address__c> addrs1=addsObj.duplicateAddrList(addr);
			addrs1=addsObj.duplicateAddrListSameAddressType(addr);
			addrs1=addsObj.accountAddressList(usrs[0].AccountId);
			
			Configurator_Settings__c csc=Configurator_Settings__c.getInstance('StandardPriceId');
			List<Opportunity> opps=[Select o.Number_of_Users__c, o.Name,o.PriceBook2Id, o.Id, o.Contract_Term__c From Opportunity o
									where o.Id='0066000000OIf3u' order by createddate desc limit 1];
			
			CommonObj.CommonLib cLib=new CommonObj.CommonLib();
			CommonObj.ProductConfiguratorObj pConfig=new CommonObj.ProductConfiguratorObj(opps[0].Id);
			
    		system.debug(logginglevel.WARN,pConfig.aLaCarteIds);
    		
    		 //regular package Id,aLaCarte package Id and current class
    		string y1,y2,pClass;
    		for (string x1:pConfig.aLaCarteIds.keySet()){
    			if (y1!=null&&y2!=null&&pClass!=null)
    				break;
    		
    			map<string,ProductMatrixObject> x2=
    				pConfig.productMatrix.get(x1);
    			if (x2.values().size()>1){
    				pClass=x1;
    				for (string x3:x2.keySet()){
 
    					if (pConfig.aLaCarteIds.get(x1)==x3)
    						y2=x3;
    					else if(x2.get(x3).packageType=='All'&&y1==null){
    						y1=x3;
    					}
    				}
    				
    			}
    		}
    		
    		//system.debug(logginglevel.WARN,'y1:'+y1+', y2:'+y2+', y5:'+y5+', pClass:'+pClass);
    		//return;
    		boolean hResult=pConfig.addProductComparisonMatrix(new map<string,string>{y1=>y1},pClass);
    		list<ProductMatrixObject> w11=pConfig.productMap.values();
    		
    		ProductRelationshipMatrixObject w8=new ProductRelationshipMatrixObject();
    		w8.sfdcId=w11[0].sfdcId;
    		w8.price=10;
    		w8.upfrontPayment=0;
    		w8.recurringPayment=10;
    		w8.productCode='Chia Pet';
    		w8.productDesc='Chia Pet';
    		w8.licenseUnitList.add('User');
    		w8.productName='Chia Pet';
    		w8.moduleDisplayOrder=10;
    		w8.isIncluded=true;
    		w8.packageType='All';
    		w8.packageClassification='pClass';
    		w8.relationshipType='Contains';
    		
    		ProductRelationshipMatrixObject w9=new ProductRelationshipMatrixObject(w8);
    		w9.isIncluded=false;
    		//ProductRelationshipMatrixObject w8=new ProductRelationshipMatrixObject(productMap.values()[0]);
    		
    		pConfig.productComparisonMatrix.get(y1).fullProductList.put(w8.sfdcId,w8);
    		pConfig.productComparisonMatrix.get(y2).fullProductList.put(w9.sfdcId,w9);
    		
    		ProductRelationshipMatrixObject w12=new ProductRelationshipMatrixObject(w8);
    		w12.packageType='Pick 1';
    		w12.sfdcId=w11[1].sfdcId;		
    		pConfig.productComparisonMatrix.get(y1).fullProductList.put(w12.sfdcId,w12);
    		ProductRelationshipMatrixObject w13=new ProductRelationshipMatrixObject(w12);
    		pConfig.productComparisonMatrix.get(y2).fullProductList.put(w13.sfdcId,w13);
    		
    		
    		//system.debug(logginglevel.WARN,'hResult:' + hResult);
    		/** test loop 1*/
    		string y3;//sub product Id
    		string y4;//real product Id
    		for (string x1:pConfig.productComparisonMatrix.get(y1).fullProductList.keySet()){
    			ProductRelationshipMatrixObject prmo=
    				pConfig.productComparisonMatrix.get(y1).fullProductList.get(x1);
    			if (!prmo.isIncluded){
    				y4=prmo.sfdcId;
    				y3=(pConfig.productComparisonMatrix.get(y1).sfdcId+'-'+prmo.sfdcId);
    				break;
    			}	
    		}
    		
    		pConfig.addShoppingCartItems(new map<string,string>{y3=>'10'},y1);
    		
    		ProductMatrixObject z1=pConfig.productShoppingCart.get(y4);
    		//system.debug(logginglevel.WARN,z1);
    		//return;
    		pConfig.resetShoppingCartPricing(new map<string,string>{y4+'-qty'=>string.valueOf(z1.qty)});
    		//pConfig.productMap.keySet()[0];
    		ProductMatrixObject w5=pConfig.productMap.values()[0];
    		pConfig.addShoppingCartItem(w5.sfdcId);
    		pConfig.resetShoppingCartPricing(new map<string,string>{y4+'-qty'=>string.valueOf(z1.qty),
    																w5.sfdcId+'-qty'=>string.valueOf(w5.qty)});
    		
    		
    		//run over the rest of remaining lines
    		
    		
    		z1=pConfig.productComparisonMatrix.get(y1);
    		list<SelectOption> w1=z1.getLicenseUnitOptions();
    		pConfig.productShoppingCart.values().sort();
    		list<ProductRelationshipMatrixObject> w2=z1.getFullProductList;
    		list<Promotions__c> prcs=pConfig.pricingConfigObj.getPromotionList();
    		pConfig.applyPromosInShoppingCart(new set<string>{prcs[0].Id,prcs[1].Id}, decimal.valueOf('500'));
    		list<ProductMatrixObject> w15=pConfig.productShoppingCart.values();
    		
    		//bs.get(comparisonId+'-pick')==prmo.sfdcId
    		//packageType=='Pick 1'
    		ProductRelationshipMatrixObject w20=new ProductRelationshipMatrixObject(w8);
    		ProductRelationshipMatrixObject w21=new ProductRelationshipMatrixObject(w9);
    		w20.packageType='Pick 1';
    		w21.packageType='Pick 1';
    		
    		w15[w15.size()-1].fullProductList.put(w20.sfdcId,w20);
    		w15[w15.size()-1].fullProductList.put(w21.sfdcId,w20);
    		
    		//pricingConfigObj.getPromotionList();
    		//system.debug(logginglevel.WARN,w2);
    		
    		//integer w3=w2[0].compareTo(w2[0]);
    		try{
    			hResult=pConfig.generateOpportunityProducts(new map<string,string>{w15[w15.size()-1].sfdcId+'-pick'=>w20.sfdcId});
    		}
    		catch(Exception ex){
    			system.debug(logginglevel.WARN,ex);
    		}
    		return;
    		
    	}
    }
	
/* Begin Type Class */

	/* Address Type */
	public class AddressType {
		public AddressType(){}
		public integer id {get;set;}
		public string street_number {get;set;}
		public string route {get;set;}
		public string street {get;set;}
		public string neighborhood {get;set;}
		public string city {get;set;}
		public string county {get;set;}
		public string state {get;set;}
		public string zip {get;set;}
		public string country {get;set;}
	}
	/* End Address Type */
	
	/* Quantity Comparison Type */
	global class QuantityType{
		public integer recommendedQty {get;set;}
		public integer maxQty {get;set;}
		public integer minQty {get;set;}
		public string licenseUnit {get;set;}
		public QuantityType(integer recommendedQtyx,integer maxQtyx,integer minQtyx, string lUnit){
			this.recommendedQty=recommendedQtyx;
			this.maxQty=maxQtyx;
			this.minQty=minQtyx;
			this.licenseUnit=lUnit;
		}
		public QuantityType(QuantityType qt){
			this.recommendedQty=qt.recommendedQty;
			this.maxQty=qt.maxQty;
			this.minQty=qt.minQty;
			this.licenseUnit=qt.licenseUnit;
		}
	}
	
	/* Price Schedule Type (for getting pricing purpose) */
	global class PriceScheduleType{
		public string productId {get;set;}
		public string licenseUnit {get;set;}
		public integer licenseQty {get;set;}
		public PriceScheduleType(string pId,string lUnit,integer lQty){
			productId=pId;
			licenseUnit=lUnit;
			licenseQty=lQty;
		}
	}
	
	/* Begin Product Matrix Object with Comparable Interface */
	global class ProductMatrixObject implements Comparable{
		public ProductMatrixObject(){
			this.fullProductList=new map<string,ProductRelationshipMatrixObject>();	
			this.licenseUnitList=new set<string>();	
			this.preReq=new map<string,QuantityType>();	
			this.exclude=new set<string>();	
			this.quantityList=new QuantityType(-1,-1,-1,'');

			this.price=0;
			this.upfrontPayment=0;
			this.recurringPayment=0;	
		}
		public ProductMatrixObject(ProductMatrixObject pro){
			this.productCode=pro.productCode;
			this.sfdcId=pro.sfdcId;
			this.price=pro.price;
			this.upfrontPayment=pro.upfrontPayment;
			this.recurringPayment=pro.recurringPayment;
			this.productDesc=pro.productDesc;
			this.fullProductList=pro.fullProductList.clone();
			this.qty=pro.qty;
			this.preReq=pro.preReq.clone();
			this.exclude=pro.exclude.clone();
			this.isPackage=pro.isPackage;
			this.licenseUnitList=pro.licenseUnitList.clone();
			this.packageDisplayOrder=pro.packageDisplayOrder;
			this.packageType=pro.packageType;
			this.packageClassification=pro.packageClassification;
			this.orgQty=pro.orgQty;
			this.quantityList=new QuantityType(pro.quantityList);
		}
		
		public ProductMatrixObject(ProductRelationshipMatrixObject prmo){
			this.productCode=prmo.productCode;
			this.sfdcId=prmo.sfdcId;
			this.productName=prmo.productName;
			this.productDesc=prmo.productDesc;
			this.price=prmo.price;
			this.upfrontPayment=prmo.upfrontPayment;
			this.recurringPayment=prmo.recurringPayment;
			this.qty=prmo.qty;
			this.orgQty=prmo.qty;
			this.preReq=prmo.preReq.clone();
			this.exclude=prmo.exclude.clone();
			this.licenseUnitList=prmo.licenseUnitList.clone();
			this.packageType=prmo.packageType;
			this.fullProductList=new map<string,ProductRelationshipMatrixObject>();
			this.packageClassification=prmo.packageClassification;
			this.quantityList=new QuantityType(prmo.quantityList);
		}
		
	 
		public void refreshPricing(C2CEnterprisePriceController pco, integer newQty){
			this.price=pco.fetchPricingForProduct(this.sfdcId,this.quantityList.licenseUnit,newQty);
			this.upfrontPayment=pco.fetchUpfrontPayment(this.sfdcId,this.quantityList.licenseUnit,newQty);
			this.recurringPayment=pco.fetchRecurringPayment(this.sfdcId,this.quantityList.licenseUnit,newQty);
			
			this.qty=newQty;
		}
		
		public string productCode {get;set;}
		public string sfdcId {get;set;}
		public string productName {get;set;}
		public string productDesc {get;set;}
		public integer packageDisplayOrder {get;set;}
		
		/* pricing */
		public decimal price {get;set;}
		public decimal upfrontPayment {get;set;}
		public decimal recurringPayment {get;set;}
		public decimal subtotal {get{return price*qty;}}
		/* end of pricing */
		
		public integer orgQty {get;set;}
		public integer qty {get;set;}
		public string packageType {get;set;}
		public string packageClassification {get;set;}
		public boolean isPackage {get;set;}

		public set<string> licenseUnitList {get;set;}
		/* productId, reCommended Qty. */
		public map<string,QuantityType> preReq {get;set;}
		public set<string> exclude {get;set;}
		
		public list<SelectOption> getLicenseUnitOptions(){
			list<SelectOption> lSelect=new list<SelectOption>();
			for (string lUnit:licenseUnitList){
				if (lUnit!=null){
					lSelect.add(new SelectOption(lUnit,lUnit));
				}
			}
			return lSelect;
		}
		
		public string termUnit {get;set;}
		public integer termUnitMin {get;set;}
		public integer termUnitMax {get;set;}
		public QuantityType quantityList {get;set;}
		public map<string,ProductRelationshipMatrixObject> fullProductList {get;set;}
		public list<ProductRelationshipMatrixObject> getFullProductList {
			get{
				list<ProductRelationshipMatrixObject> op=this.fullProductList.values();
				op.sort();
				return op;
			}
		} 
		global integer compareTo(Object compareTo) {
			ProductMatrixObject compareToEmp = (ProductMatrixObject)compareTo;
	        if (packageDisplayOrder == compareToEmp.packageDisplayOrder) return 0;
	        if (packageDisplayOrder > compareToEmp.packageDisplayOrder) return 1;
	        return -1;        
    	}
	}
	/* End Product Matrix Object */
	
	/* Product Relationship Matrix Object with implementing comparable interface */
	global class ProductRelationshipMatrixObject implements Comparable {
		public ProductRelationshipMatrixObject(){
			this.licenseUnitList=new set<string>();
			this.preReq=new map<string,QuantityType>();
			this.quantityList=new QuantityType(-1,-1,-1,'');
			this.exclude=new set<string>();
			this.qty=-1;
			this.price=0;
			this.upfrontPayment=0;
			this.recurringPayment=0;
			this.isIncluded=false;
			
		}
		public ProductRelationshipMatrixObject(ProductRelationshipMatrixObject pr){
			this.productCode=pr.productCode;
			this.sfdcId=pr.sfdcId;
			this.productDesc=pr.productDesc;
			this.productName=pr.productName;
			this.isIncluded=pr.isIncluded;
			this.price=pr.price;
			this.upfrontPayment=pr.upfrontPayment;
			this.recurringPayment=pr.recurringPayment;
			
			this.preReq=pr.preReq.clone();
			this.exclude=pr.exclude.clone();
			this.licenseUnitList=pr.licenseUnitList;
			this.moduleDisplayOrder=pr.moduleDisplayOrder;
			this.packageType=pr.packageType;
			this.packageClassification=pr.packageClassification;
			this.quantityList=new QuantityType(pr.quantityList);
			this.relationshipType=pr.relationshipType;
			this.qty=pr.qty;
		}
		/* pricing */
		public decimal price {get;set;}
		public decimal upfrontPayment {get;set;}
		public decimal recurringPayment {get;set;}
		/* end pricing */
		
		public string productCode {get;set;}
		public string sfdcId {get;set;}
		public string productDesc {get;set;}
		
		public set<string> licenseUnitList {get;set;}
		public map<string,QuantityType> preReq {get;set;}
		public set<string> exclude {get;set;}
		
		public string productName {get;set;}
		public integer moduleDisplayOrder {get;set;}
		public boolean isIncluded {get;set;}
		public string packageType{get;set;}
		public string packageClassification {get;set;}
		public string relationshipType {get;set;}
		
		public QuantityType quantityList {get;set;}
		public integer qty {get;set;}
		
		global integer compareTo(Object compareTo) {
        	ProductRelationshipMatrixObject compareToEmp = (ProductRelationshipMatrixObject)compareTo;
	        if (moduleDisplayOrder == compareToEmp.moduleDisplayOrder) return 0;
	        if (moduleDisplayOrder > compareToEmp.moduleDisplayOrder) return 1;
	        return -1;        
    	}
	}
	/* End Product Relationship Matrix Object */ 
	
/* End Type Class */


/* Enumerators */
	
	public enum CommonExceptionType{
		TestError,
		DebugError,
		PricingError,
		ProductMatrixLoadingError,
		NoAlaCarteAvailable,
		NoOpportunityInfo,
		NoActiveProductAvailable,
		NoOpportunityRecordsFound,
		NoPromotionAvailable,
		NoRegions,
		NoActiveProductPriceInAccount,
		GoogleGeocodeAddressesParsingError,
		FailCreateOppLine,
		UOMValidationError,
		IncorrectOpportunityOwner,
		ConflictingPricebookIds,
		NoAvailableQuantities
	}
	
	/*
		Payment type from price schedule,
		
	*/

/* Enumerators end */

	/* Exception Class Begin */
	public class CommonException extends Exception {
		
		public CommonObj.CommonExceptionType cExceptionType;
		public string developerAnnotation;
		
		public CommonException(string devNote,CommonExceptionType exceptionType){
			this.cExceptionType=exceptionType;
			this.developerAnnotation=devNote;
		}
		
		public virtual void notifyViaEmail(string[] toAddresses){ 
	    	Messaging.reserveSingleEmailCapacity(2); 
			Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
			
			mail.setToAddresses(toAddresses);
			mail.setCcAddresses(new String[] {'chia.chang@mitchell.com'});
			mail.setReplyTo('DoNotReply@mitchell.com');
			mail.setSenderDisplayName('DoNotReply');
			mail.setSubject('Developers\' Common Exception Handling: ' + this.getTypeName());
			mail.setBccSender(false);
			mail.setUseSignature(false);
			mail.setPlainTextBody('Well well well, it seems we\'re running into some issue. ^_________^" \n\n' +
									'Exception Type: ' + string.valueOf(cExceptionType) + '\n\n' +
									'Developers\' Annotation: ' + this.developerAnnotation + '\n\n' +
									'System Description: ' + this.getMessage() + '\n\n' +
									'Trace: ' + this.getStackTraceString() + '\n\n' + 
									'Line Number: ' + this.getLineNumber());
			Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
		}
		
	}
	/* Exception Class End */

	/* Common Library Begin */	
	global virtual class CommonLib implements IIntegration {
		
		public string corpAPI(string action){
			try{
				http h = new http();
	 			httprequest req = new httprequest();
				req.setEndpoint('https://' + ApexPages.currentPage().getHeaders().get('Host') + '/services/data/v20.0/query/?q=' + EncodingUtil.URLEncode(action,'UTF-8'));
				req.setMethod('GET');
				req.setHeader('Authorization', 'OAuth ' + userInfo.getSessionId());
				req.setTimeout(60000);
				httpresponse res = h.send(req);
				return res.getBody();
			}
			catch (Exception ex){
				system.debug(ex);
				this.notifyStandardExceptionViaEmail('test exception handling class',ex,developerEmails);
				return '';
			}
		}
		
		//Google Geocoding
		public string googleAPI(string addr){
			try {
			Http httpProtocol = new Http();
		   	HttpRequest request = new HttpRequest();
		    request.setEndPoint('https://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=' 
																+ EncodingUtil.urlEncode(addr, 'UTF-8') 
																+ '&sensor=true');
	        request.setMethod('GET');
		    HttpResponse res = httpProtocol.send(request);
			return res.getBody();
			}
			catch (Exception ex){
				system.debug(ex);
				this.notifyStandardExceptionViaEmail('test exception handling class',ex,developerEmails);
				
				return '{ "results" : [ { "address_components" : [ { "long_name" : "1600", "short_name" : "1600", "types" : [ "street_number" ] }, { "long_name" : "Amphitheatre Pkwy", "short_name" : "Amphitheatre Pkwy", "types" : [ "route" ] }, { "long_name" : "Mountain View", "short_name" : "Mountain View", "types" : [ "locality", "political" ] }, { "long_name" : "Santa Clara", "short_name" : "Santa Clara", "types" : [ "administrative_area_level_2", "political" ] }, { "long_name" : "California", "short_name" : "CA", "types" : [ "administrative_area_level_1", "political" ] }, { "long_name" : "United States", "short_name" : "US", "types" : [ "country", "political" ] }, { "long_name" : "94043", "short_name" : "94043", "types" : [ "postal_code" ] } ], "formatted_address" : "1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA", "geometry" : { "location" : { "lat" : 37.42291810, "lng" : -122.08542120 }, "location_type" : "ROOFTOP", "viewport" : { "northeast" : { "lat" : 37.42426708029149, "lng" : -122.0840722197085 }, "southwest" : { "lat" : 37.42156911970850, "lng" : -122.0867701802915 } } }, "types" : [ "street_address" ] } ], "status" : "OK" }';
			}
		}
		
		public List<SelectOption> getPicklistValues(SObject obj, String fld){
			List<SelectOption> options = new List<SelectOption>();
			Schema.sObjectType objType = obj.getSObjectType();
			Schema.DescribeSObjectResult objDescribe = objType.getDescribe();
			Map<String, Schema.SObjectField> fieldMap = objDescribe.fields.getMap(); 
			List<Schema.PicklistEntry> values = fieldmap.get(fld).getDescribe().getPickListValues();
			for (Schema.PicklistEntry a : values)
			{ 
				options.add(new SelectOption(a.getLabel(), a.getValue())); 
			}
			return options;
		}
	
		public void notifyStandardExceptionViaEmail(string developerAnnotation,Exception ex,string[] toAddresses){
			Messaging.reserveSingleEmailCapacity(2); 
			Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
			
			mail.setToAddresses(toAddresses);
			mail.setCcAddresses(new String[] {'chia.chang@mitchell.com'});
			mail.setReplyTo('DoNotReply@mitchell.com');
			mail.setSenderDisplayName('DoNotReply');
			mail.setSubject('Developers\' System Exception Handling: ' + ex.getTypeName());
			mail.setBccSender(false);
			mail.setUseSignature(false);
			mail.setPlainTextBody('Well well well, it seems we\'re running into some system issue. ^_________^" \n\n' +
									'Exception Type: ' + ex.getTypeName() + '\n\n' +
									'Developers\' Annotation: ' + developerAnnotation + '\n\n' +
									'System Description: ' + ex.getMessage() + '\n\n' +
									'Trace: ' + ex.getStackTraceString() + '\n\n' + 
									'Line Number: ' + ex.getLineNumber());
			Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
		}
		
		public ApexPages.Message[] commonMessages {get{return ApexPages.getMessages();}}
		public void addCommonMessage(ApexPages.Severity aps,string anno){
			ApexPages.addMessage(new ApexPages.Message(aps,anno));
		}
		public void addCommonMessage(string anno){
			ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO,anno));
		}
		
		//public void addCustomMessage(string anno, string htmlId){
		//	customMessages
			//ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO,anno));
		//}
		
		
		
	}
	
/* Common Library End */

/* Begin Product Configurator Object */
	public class ProductConfiguratorObj extends CommonLib {
		
		public C2CEnterprisePriceController pricingConfigObj {get;set;}
		/* The Ala Carte Ids */
		public map<string/*classification*/,string> aLaCarteIds {get;set;}
		/* Ultimate Product Matrixes */
		public map<string/*classification*/,map<string,ProductMatrixObject>> productMatrix {get;set;}
		/* Screen 2 Product Comparasion Matrix */
		public map<string,ProductMatrixObject> productComparisonMatrix {get;set;}
		/* The All New Product Map 2012 */
		public map<string, ProductMatrixObject> productMap {get;set;}
		/* The Shoppingcart Items */
		public map<string,ProductMatrixObject> productShoppingCart {get;set;}
		/* Validating Business rules for all mitchell product */
		public BusinessRuleObj bizObj {get;set;}
		/* Commin Library */
		
		public string currentProductClass {get;set;}
		
		/* Current Opportunity to launch the Product Configurator */
		public Opportunity currentOpp {get;set;}
		
		/* Static Instantiaton */ 
		{
			productMatrix=new map<string,map<string,ProductMatrixObject>>();
			aLaCarteIds=new map<string,string>();
			currentOpp=new Opportunity();
			productComparisonMatrix=new map<string,ProductMatrixObject>();
			productShoppingCart=new map<string,ProductMatrixObject>();
			productMap=new map<string, ProductMatrixObject>();
			//customMessages=new map<string,string>();
			
		}
		
		public ProductConfiguratorObj(){}
		
		public ProductConfiguratorObj(string oppId){
			boolean op=true;
			try{
				loadCurrentOpportunity(oppId);
			}
			catch (CommonException cEx){
				cEx.notifyViaEmail(CommonObj.developerEmails);
				op=false;
			}
		 
			if (op){
				pricingConfigObj = new C2CEnterprisePriceController(currentOpp.AccountId, currentOpp.Billing_Country__c, 
										currentOpp.m_License_Unit__c, integer.valueOf(currentOpp.Number_of_Users__c));
				buildProductMatrix();
				loadProductMap();
				bizObj=new BusinessRuleObj(productMap, currentOpp.AccountId);
				
			}
		}
		
		/* Insert the selected package(s) into the product comparison matrix */
		public boolean addProductComparisonMatrix(Map<String, String> bs,string pClass){
			
			integer i=0;
			for (ProductMatrixObject pmo:((map<string,ProductMatrixObject>)productMatrix.get(pClass)).values()){
				if (bs.containsKey(pmo.sfdcId))
					++i;	
			}
			
			if (i>5){
				addCommonMessage(ApexPages.Severity.WARNING,'You\'ve selected more than 5 packages for package comparison.');
				return false;
			}
			
			if (i<1){
				addCommonMessage(ApexPages.Severity.WARNING,'No package is being selected. (Ala Carte is not counted)');
				return false;
			}
			
			try {
				buildProductComparisonMatrix(bs,pClass);
			}
			catch (CommonException cEx){
				addCommonMessage(ApexPages.Severity.WARNING,cEx.developerAnnotation);
				return false;
			}
			
			currentProductClass=pClass;
			
			return true;
		}
		
		/* insert the product into the shoppingcart */ 
		public void addShoppingCartItem(string productId){
			integer seq=productShoppingCart.size()+1000;
			
			if (productShoppingCart.containsKey(productId))
				return;
				
			if (productMap.containsKey(productId)){
				ProductMatrixObject pmo=productMap.get(productId);
				ProductMatrixObject pmo2=new ProductMatrixObject(pmo);
				
				pmo2.packageDisplayOrder=productShoppingCart.size()+1;
				pmo2.packageClassification='N/A';
				pmo2.packageType='AddOn';
				
				pmo2.qty=getOutRangeQty(currentOpp.m_License_Unit__c, pmo2.quantityList.licenseUnit,
										integer.valueOf(currentOpp.Number_of_Users__c), pmo2.quantityList.maxQty, pmo2.quantityList.minQty, 
										pmo2.quantityList.recommendedQty);
				pmo2.orgQty=pmo2.qty;
				productShoppingCart.put(pmo2.sfdcId,pmo2);
				seq++;	
				map<string,QuantityType> op=loadPreReqProductsList(pmo2.sfdcId);
				for (string prodId:op.keySet()){
					if (productShoppingCart.containsKey(prodId)) continue;
					
					if (productMap.containsKey(prodId)){
						
						
						ProductMatrixObject pmoz=new ProductMatrixObject(productMap.get(prodId));
						if (bizObj.IsAnAssetOnAccount(prodId)){
							addCommonMessage('Product \'' + pmoz.productCode + '\' is already an asset for this account.');
							continue;
						}
						/*
						if (op.containsKey(prodId)) {
							
							addCommonMessage(ApexPages.Severity.WARNING,
											pmoz.productDesc + ' has no Quantity information. Please consult PM for the details.');
							//continue;
						}
						*/
						
						/* Getting Quantity List */
						QuantityType qt=op.get(prodId);
						pmoz.quantityList=new  QuantityType(qt);
						pmoz.packageDisplayOrder=seq;
						pmoz.isPackage=false;
						pmoz.packageType='AddOn';
						
						pmoz.qty=getOutRangeQty(currentOpp.m_License_Unit__c, pmoz.quantityList.licenseUnit,
										integer.valueOf(currentOpp.Number_of_Users__c), pmoz.quantityList.maxQty, pmoz.quantityList.minQty, 
										pmoz.quantityList.recommendedQty);
						pmoz.orgQty=pmoz.qty;
						if (!productShoppingCart.containsKey(pmoz.sfdcId))	{
							
							productShoppingCart.put(pmoz.sfdcId,pmoz);		
							seq++;
						}
					}
				}
				
				/* Validate when checkout
				for (string prodId:pmo2.exclude){
					for (ProductMatrixObject pmos:productShoppingCart.values()){
						if (pmos.packageType=='AddOn'&&pmos.sfdcId==prodId)
							productShoppingCart.remove(prodId);
					}
				}*/
			}
			
			validatePreReqAnyOne();
		}
		
		/* Reset the pricing in Shoppingcart */
		public map<string,string> resetShoppingCartPricing(map<string,string> bs){
			/* Custom Messages for advanced ajax message map<html Id, message content> */
			map<string,string> customMessages=new map<string,string>(); 
		
			map<string,PriceScheduleType> pstList=new map<string,PriceScheduleType>();
			
			for (ProductMatrixObject pmo:productShoppingCart.values()){
				/* products in cart should have been registered in productMap UOM*/
				string[] op=pmo.sfdcId.split('-',-2);
				if (op.size()>1)
					pstList.put(op[1],new PriceScheduleType(op[1],pmo.quantityList.licenseUnit,pmo.quantityList.recommendedQty));
				else
					pstList.put(pmo.sfdcId,new PriceScheduleType(pmo.sfdcId,pmo.quantityList.licenseUnit,pmo.quantityList.recommendedQty));
				
			}
			
			/* Reload the required pricing data */
			pricingConfigObj.loadPricingMap(pstList);
			
			for (ProductMatrixObject pmo:productShoppingCart.values()){
				integer qty;
				if (bs.containsKey(pmo.sfdcId+'-qty')){
					if (bs.get(pmo.sfdcId+'-qty')==''){
						string msg='The quantity for ' + pmo.productDesc + ' cannot be empty.';
						//addCommonMessage(ApexPages.Severity.WARNING,msg);
						customMessages.put(pmo.sfdcId+'-qty',msg);
						continue;
					}
					if (integer.valueOf(bs.get(pmo.sfdcId+'-qty'))==0){
						string msg='The quantity for ' + pmo.productDesc + ' should not be zero.';
						//addCommonMessage(ApexPages.Severity.WARNING,msg);
						customMessages.put(pmo.sfdcId+'-qty',msg);
						continue;
					}
					
					if (!bizObj.isProductWithinValidQuantityRangeinProdRelationShip(pmo.quantityList.recommendedQty,
														pmo.quantityList.maxQty,
														pmo.quantityList.minQty, 
														pmo.packageType,
														integer.valueOf(bs.get(pmo.sfdcId+'-qty')))){
						string msg='Please ensure that the ' + pmo.productDesc + ' qty falls in this range: Min ' + pmo.quantityList.minQty + ', ' +
																													'Recommended ' + pmo.quantityList.recommendedQty + ', ' +
																													'Max ' + pmo.quantityList.maxQty;
															
						//addCommonMessage(ApexPages.Severity.WARNING,msg);									
						customMessages.put(pmo.sfdcId+'-qty',msg);
						continue;									
					}
					else if (!bizObj.isProductWithinValidLicenseQty(pmo.sfdcId,integer.valueOf(bs.get(pmo.sfdcId+'-qty')))){
						ProductMatrixObject pmox=productMap.get(pmo.sfdcId);
						string msg='Please ensure that the ' + pmo.productDesc + ' qty falls in this range: Min ' + pmox.quantityList.minQty + ', ' +
																													'Recommended ' + pmox.quantityList.recommendedQty + ', ' +
																													'Max ' + pmox.quantityList.maxQty;
						//addCommonMessage(ApexPages.Severity.WARNING,msg);
						customMessages.put(pmo.sfdcId+'-qty',msg);
						continue;
					}
														
					qty=bizObj.getActualRecommendedQty(pmo.quantityList.recommendedQty,
														pmo.quantityList.maxQty,
														pmo.quantityList.minQty, 
														pmo.packageType,
														integer.valueOf(bs.get(pmo.sfdcId+'-qty')));
					
				}
				else
					qty=pmo.orgQty;
					
				if (pmo.isPackage){
					pmo.refreshPricing(pricingConfigObj,qty);
				}
				else if (pmo.packageType=='AddOn'){
					pmo.refreshPricing(pricingConfigObj,qty);	
				}
				
				if (pmo.price<0/*||pmo1.upfrontPayment<0||pmo1.recurringPayment<0*/){
					addCommonMessage('The product-' + pmo.productCode + ' contains no active pricing for the quantity: ' + pmo.qty + ' and the License Unit: ' + pmo.quantityList.licenseUnit);
					productShoppingCart.remove(pmo.sfdcId);
				}
					
			}	
			
			return customMessages;
						
		}
		
		/* remove item from the shoppingcart */
		public void removeShoppingCartItem(string productId){
			
			for (string pmoKey:productShoppingCart.keySet()){
				if (pmoKey.contains(productId))
					productShoppingCart.remove(pmoKey);
			}
			
		}
		
		/* Applying promotions in Shopping Cart */
		public void applyPromosInShoppingCart(set<string> promos, decimal recurringSubtotal){
			for (ProductMatrixObject pmo:productShoppingCart.values()){
				pmo.upfrontPayment=pricingConfigObj.applyPromoOnUpfrontPayment(promos,pmo.sfdcId,pmo.upfrontPayment,pmo.qty,integer.valueOf(currentOpp.Contract_Term__c),recurringSubtotal);
				pmo.recurringPayment=pricingConfigObj.applyPromoOnRecurringPayment(promos,pmo.sfdcId,pmo.recurringPayment,pmo.qty,integer.valueOf(currentOpp.Contract_Term__c),recurringSubtotal);
			}
		}
		
		public integer getOutRangeQty(string oppLU, string prodLU, integer oppQty, 
									integer maxQty, integer minQty, integer recommendedQty){
			integer finalQty;
			if (oppLU==prodLU){
				finalQty=oppQty;
				
				if (oppLU>prodLU)
					finalQty=maxQty;
				if (oppLU<prodLU)
					finalQty=minQty;
			}
			else
				finalQty=recommendedQty;
							
			return finalQty;
		}
		
		/* Insert the selected package into the shoppingcart */
		public void addShoppingCartItems(Map<String, String> bs,string bundleId){
				
			integer seq=productShoppingCart.size()+1;
			ProductMatrixObject pmo=(ProductMatrixObject)productComparisonMatrix.get(bundleId);
			
			if (alaCarteIds.get(currentProductClass)!=bundleId){
			
				ProductMatrixObject pmot=new ProductMatrixObject(pmo);
				
				pmot.qty=integer.valueOf(currentOpp.Number_of_Users__c);
				pmot.orgQty=integer.valueOf(currentOpp.Number_of_Users__c);
				
				if (pmo.price<0/*||pmo.upfrontPayment<0||pmo.recurringPayment<0*/){
					addCommonMessage('The product-' + pmo.productCode + ' contains no active pricing for the quantity: ' + pmo.qty + '.');
				}
				
				pmot.packageDisplayOrder=seq;
				pmot.isPackage=true;
				pmot.fullProductList=new map<string,ProductRelationshipMatrixObject>();
				productShoppingCart.put(pmot.sfdcId,pmot);
				seq++;
			}
			
			integer seq1=1000;
			for (ProductRelationshipMatrixObject prmo:pmo.getFullProductList){
				string selectedProudct=(pmo.sfdcId+'-'+prmo.sfdcId);
				/* if the product is included in the package */
				if (prmo.isIncluded){
					ProductMatrixObject pmo1=new ProductMatrixObject(prmo);
					pmo1.packageDisplayOrder=seq;
					pmo1.price=0;
					pmo1.upfrontPayment=0;
					pmo1.recurringPayment=0;
					pmo1.isPackage=false;
					pmo1.packageType=prmo.packageType;
					
					if (prmo.packageType=='Pick 1'||prmo.packageType=='Pick N of M'){
						
						pmo1.fullProductList=new map<string,ProductRelationshipMatrixObject>();
						if (productComparisonMatrix.containsKey(prmo.sfdcId)){
							ProductMatrixObject pmo2=(ProductMatrixObject)productComparisonMatrix.get(prmo.sfdcId);
							for (ProductRelationshipMatrixObject prmo3:pmo2.getFullProductList){
								ProductRelationshipMatrixObject prmo4=new ProductRelationshipMatrixObject(prmo3);
								/* utilise the package type from the package */
								prmo4.packageType=prmo.packageType;
								pmo1.fullProductList.put(prmo4.sfdcId,prmo4);
							}
						}
					}
					pmo1.sfdcId=selectedProudct;
					productShoppingCart.put(selectedProudct,pmo1);
					seq++;
					//continue;
				}
				/* if this product is being selected in the pacakge*/
				else if (bs.containsKey(selectedProudct)) {
					ProductMatrixObject pmo1=new ProductMatrixObject(prmo);
					pmo1.packageDisplayOrder=seq1;
					pmo1.packageType='AddOn';
					pmo1.isPackage=false;
					
					/* only package type is 'Pick 1' or 'Pick N of M' will have sub items in the shopping cart */
					if (prmo.packageType=='Pick 1'||prmo.packageType=='Pick N of M'){
						
						pmo1.fullProductList=new map<string,ProductRelationshipMatrixObject>();
						if (productComparisonMatrix.containsKey(prmo.sfdcId)) {
							ProductMatrixObject pmo2=(ProductMatrixObject)productComparisonMatrix.get(prmo.sfdcId);
							for (ProductRelationshipMatrixObject prmo3:pmo2.getFullProductList){
								ProductRelationshipMatrixObject prmo4=new ProductRelationshipMatrixObject(prmo3);
								/* utilise the package type from the package */
								prmo4.packageType=prmo.packageType;
								pmo1.fullProductList.put(prmo4.sfdcId,prmo4);
							}
						}
					}
					
					productShoppingCart.put(pmo1.sfdcId,pmo1);
					seq1++;
				
				}
			} 
			
			for (string prodId:pmo.preReq.keySet()){
				if (productShoppingCart.containsKey(prodId)) continue;
				
				if (productMap.containsKey(prodId)){
					ProductMatrixObject pmoz=new ProductMatrixObject(productMap.get(prodId));
					
					if (bizObj.IsAnAssetOnAccount(prodId)){
						addCommonMessage('Product \'' + pmoz.productCode + '\' is already an asset for this account.');
						continue;
					}
					
					/* Getting Quantity List */
					QuantityType qt=pmo.preReq.get(prodId);
					
					pmoz.packageDisplayOrder=seq1;
					pmoz.isPackage=false;
					
					pmoz.quantityList=new QuantityType(qt);
															
					pmoz.qty=getOutRangeQty(currentOpp.m_License_Unit__c, pmoz.quantityList.licenseUnit,
											pmo.qty, pmoz.quantityList.maxQty, pmoz.quantityList.minQty, 
											pmoz.quantityList.recommendedQty);
					pmoz.orgQty=pmoz.qty;
					
					/* only package type is 'Pick 1' or 'Pick N of M' will have sub items in the shopping cart */
					if (pmoz.packageType=='Pick 1'||pmoz.packageType=='Pick N of M'){
						pmoz.fullProductList=new map<string,ProductRelationshipMatrixObject>();
						if (productComparisonMatrix.containsKey(prodId)) {
							ProductMatrixObject pmo2=(ProductMatrixObject)productComparisonMatrix.get(prodId);
							for (ProductRelationshipMatrixObject prmo3:pmo2.getFullProductList){
								ProductRelationshipMatrixObject prmo4=new ProductRelationshipMatrixObject(prmo3);
								/* utilise the package type from the package */
								prmo4.packageType=pmoz.packageType;
								pmoz.fullProductList.put(prmo4.sfdcId,prmo4);
							}
						}
					}
					/* finally change the package type to AddOn in the cart */
					pmoz.packageType='AddOn';
					
					productShoppingCart.put(pmoz.sfdcId,pmoz);
					seq++;
				}
			}
			/*
			for (string prodId:pmo.exclude){
				for (ProductMatrixObject pmos:productShoppingCart.values()){
					if (pmos.packageType=='AddOn'&&pmos.sfdcId==prodId)
						productShoppingCart.remove(prodId);
				}
			}
			*/
			validatePreReqAnyOne();
		} 
		
		public boolean validatePreReqAnyOne(){
			boolean isValid=true;
			//Actual products in the cart
			map<string,string> pIds=new map<string,string>();
			for (ProductMatrixObject pmoq:productShoppingCart.values()){
				string[] sfdcIds=pmoq.sfdcId.split('-', -2);
				if (sfdcIds.size()>1)
					pIds.put(sfdcIds[0],pmoq.sfdcId);
				else
					pIds.put(pmoq.sfdcId,pmoq.sfdcId);
							
			}
			
			// default pre-req only product
			map<string,string> defaultProduct=new map<string,string>();
			// the list of pre-req only 1 product
			map<string,map<string,string>> lpro=new map<string,map<string,string>>();
			for (m_Product_Relationship__c prc:[Select m.Product_Code__c, m.Related_Product_Code__c, m.Related_Product_Code__r.ProductCode,
												m.Default__c, m.Id From m_Product_Relationship__c m
								  where m.Product_Code__c in :pIds.keySet() and m.Relation_Type__c='Pre-Req Any 1'
								  and m.Product_Code__r.IsActive=true and m.Related_Product_Code__r.IsActive=true]){
				if (!lpro.containsKey(prc.Product_Code__c)){
					lpro.put(prc.Product_Code__c,new map<string,string>());
				}
				map<string,string> proox=lpro.get(prc.Product_Code__c);
				proox.put(prc.Related_Product_Code__c, prc.Related_Product_Code__r.ProductCode);
				
				if (prc.Default__c)
					defaultProduct.put(prc.Product_Code__c,prc.Related_Product_Code__c);
			}
			
			if (lpro.values().size()>0){
				for (string pId:pIds.keySet()){
					ProductMatrixObject pmo=productShoppingCart.get(pIds.get(pId));
					
					if (lpro.containsKey(pId)){
						if (pmo.packageType=='AddOn'||pmo.isPackage){
							set<string> oneList=lpro.get(pId).keySet().clone();
							oneList.retainAll(pIds.keySet());
							if (oneList.size()<1){
								string str = JSON.serialize(lpro.get(pId).values());
								
								/*
									if (defaultProduct.containsKey(pId)){
										if (!bizObj.IsAnAssetOnAccount(defaultProduct.get(pId))){
											addCommonMessage('To add \'' + pmo.productCode + '\' to the cart, you need at least one of ' + str);
											addShoppingCartItem(defaultProduct.get(pId));
											resetShoppingCartPricing(ApexPages.currentPage().getParameters());
										}
										else
											continue;
											
											
									}
								*/
								// Pre-Req Any 1 warning msg along with adding default value will only
								// work when one of the Pre-Req Any 1 list flagged as default.
								if (defaultProduct.containsKey(pId)){
									boolean isAnyAsset=false;
									for (string op:lpro.get(pId).keySet()){
										if (bizObj.IsAnAssetOnAccount(op)){
											isAnyAsset=true;
											break;
										}
									}
									if (!isAnyAsset){
										addCommonMessage('To add \'' + pmo.productCode + '\' to the cart, you need at least one of ' + str);
										addShoppingCartItem(defaultProduct.get(pId));
										resetShoppingCartPricing(ApexPages.currentPage().getParameters());
										isValid=false;
									}
								}
							}
						}
						
						continue;
					}
				}
			}
			
			return isValid;
		}
		
		/* Generating the Products List in the current Opportunity according to the shoppingCart */
		public boolean generateOpportunityProducts(map<string,string> bs){
		 	
		 	boolean hresult=validatePreReqAnyOne();
		 	if (!hresult)
		 		return false;
		 		
		 	string oppPriceBookId;
			
			/* Remember to register the custom settings in the SFDC instance */
			if (currentOpp.Pricebook2Id==null){
				Configurator_Settings__c csc=Configurator_Settings__c.getInstance('StandardPriceId');
				oppPriceBookId=csc.Standard_Pricebook_Id__c;
			}
			else
				oppPriceBookId=currentOpp.Pricebook2Id;
			
			/* get pricebook entry that's being used by the Opportunity */
			map<string,PricebookEntry> pkeMap=new map<string,PricebookEntry>();
			for (PricebookEntry pe:[Select p.id, p.UseStandardPrice, p.UnitPrice, p.isActive,p.ProductCode, 
						p.Product2Id, p.Pricebook2Id, p.Name From PricebookEntry p where 
							p.Pricebook2Id=:oppPriceBookId]){
				pkeMap.put(pe.Product2Id,pe);				
			}
			/* to handle duplicate items */
			//map<string,OpportunityLineItem> olis=new map<string,OpportunityLineItem>();
			list<OpportunityLineItem> olis=new list<OpportunityLineItem>();
			for (ProductMatrixObject pmo:productShoppingCart.values()){
				
				if (pmo.packageType!='Ala Carte'){					
					string pType='';
					//Generate the items that contained in the package. Pick 1/Pick N of M
					for (ProductRelationshipMatrixObject prmo:pmo.fullProductList.values()){
						PricebookEntry op1=(PricebookEntry)pkeMap.get(prmo.sfdcId);
						if (op1==null) continue;
						if (!op1.isActive) continue;
						
						pType=prmo.packageType;
						string comparisonId;
						if (pType=='Pick 1')
							comparisonId=pmo.sfdcId;
						else if(pType=='Pick N of M')
							comparisonId=prmo.sfdcId;
						
						if (!bs.containsKey(comparisonId+'-pick')) continue;
						
						
						if (bs.get(comparisonId+'-pick')==prmo.sfdcId){
							OpportunityLineItem oli1=new OpportunityLineItem();
							oli1.OpportunityID=currentOpp.Id;
							oli1.m_Licence_Quantity__c=pmo.qty;//– store number of Users here if the Unit is Users
							oli1.m_Licence_Unit__c=pmo.quantityList.licenseUnit;//  - store the Licence Unit in this field – let’s say User 
							
							oli1.m_Term_Unit__c=pmo.termUnit;// – store the Term Unit in this field (Month / Year) 
							oli1.m_Term_Quantity__c=currentOpp.Contract_Term__c;// – store the number of months in this 
							oli1.PricebookEntryID=op1.Id;
							
							oli1.m_Unit_Price__c=0;// no pricing required for the pacakge details level product.
							oli1.m_Payment_Upfront__c=0;
							oli1.m_Payment_Recurring__c=0;
							oli1.discount_promo__c=0;
							
							// The existing useless trigger requires these fields
							oli1.Payment_Amount__c=0;
							oli1.UnitPrice=0;
							oli1.Extended_Price__c=0;
							oli1.Terms_in_Months__c=currentOpp.Contract_Term__c;
							oli1.Quantity=pmo.qty;
							   
							oli1.From_Configurator__c=true;
							// Additional fields per Sarat
							oli1.Item_Price__c=pricingConfigObj.fetchPricingForProduct(prmo.sfdcId,pmo.quantityList.licenseUnit,1);
							string[] ids=pmo.sfdcId.split('-', -2);
							if (ids.size()>1){
								oli1.Parent_Product__c=ids[0];
								oli1.Product_from_Config__c=prmo.sfdcId;
							}
							else{
								oli1.Product_from_Config__c=prmo.sfdcId;
							}
								
							
							olis.add(oli1);	
							
						}
					}
					
					if (pType!='Pick 1'&&pType!='Pick N of M'){
						string pmoStr;
						string[] ids=pmo.sfdcId.split('-', -2);
						if (ids.size()>1){
							pmoStr=ids[1];
						}
						else
							pmoStr=pmo.sfdcId;
							
						PricebookEntry op=(PricebookEntry)pkeMap.get(pmoStr);
						if (op==null) continue;
						
						OpportunityLineItem oli=new OpportunityLineItem();
						oli.OpportunityID=currentOpp.Id;
						oli.m_Licence_Quantity__c=pmo.qty;//– store number of Users here if the Unit is Users
						oli.m_Licence_Unit__c=pmo.quantityList.licenseUnit;//  - store the Licence Unit in this field – let’s say User 
						
						oli.m_Term_Unit__c=pmo.termUnit;// – store the Term Unit in this field (Month / Year) 
						oli.m_Term_Quantity__c=currentOpp.Contract_Term__c;// – store the number of months in this 
						oli.PricebookEntryID=op.Id;
						
						
						oli.m_Unit_Price__c=(pmo.qty==0?0:pmo.price);//  - store the One Unit Price in this field before applying any discounts or promotions. We will not change this field.
						oli.m_Payment_Upfront__c=pmo.upfrontPayment;
						oli.m_Payment_Recurring__c=pmo.recurringPayment;   
						oli.discount_promo__c=0;
						
						if (pmo.price>0)
							oli.discount_promo__c=((pmo.price-(pmo.upfrontPayment+pmo.recurringPayment))/pmo.price)*100;
						
						// The existing useless trigger requires these fields
						oli.Payment_Amount__c=(pmo.price*(1-oli.discount_promo__c/100)); 
						oli.UnitPrice=(pmo.price*(1-oli.discount_promo__c/100));
						oli.Extended_Price__c=(pmo.price*currentOpp.Contract_Term__c);
						oli.Terms_in_Months__c=currentOpp.Contract_Term__c;
						oli.Quantity=pmo.qty;
						   
						oli.From_Configurator__c=true;
						
						oli.Item_Price__c=pricingConfigObj.fetchPricingForProduct(pmoStr,pmo.quantityList.licenseUnit,pmo.qty);
						if (ids.size()>1){
							oli.Parent_Product__c=ids[0];
							oli.Product_from_Config__c=pmoStr;
						}
						else{
							oli.Product_from_Config__c=pmoStr;
						}
							
						olis.add(oli);
					}
				}
			}
			OppPricingConfiguratorExtn oce=new OppPricingConfiguratorExtn();
			boolean sa=oce.generateOpportunityLineItems(currentOpp,olis);
			return sa;
		}
		
		/* load the opportunity */
		private void loadCurrentOpportunity(string oppId){
			if (oppId==null||oppId=='') throw new CommonException('No Opportunity Info',CommonExceptionType.NoOpportunityInfo);
			
			List<Opportunity> opps = [Select o.AccountId,o.Account.Name,o.Billing_Country__c,o.m_License_Unit__c,o.Number_of_Users__c, o.Name,o.PriceBook2Id, o.Id, o.Contract_Term__c From Opportunity o
										where o.Id=:oppId];
			if (opps.size()>0)
				currentOpp=opps[0];
			else {
				throw new CommonException('No Opportunity is found.',CommonExceptionType.NoOpportunityRecordsFound);
			}
		}
		
		/* Load product map */
		private void loadProductMap(){
			productMap=new map<string,ProductMatrixObject>();
			
			string countryCode=BusinessRuleObj.actualCountryCode(currentOpp.Billing_Country__c);
			for (m_Product_UOM__c pr2:[Select m.m_Term_Unit__c, m.m_LU_UOM__c, m.Term_Min_Qty__c, m.Term_Max_Qty__c, m.Product_Code__c, m.License_Min_Qty__c, m.License_Max_Qty__c,
									m.Product_Code__r.m_Package_Type__c, m.Product_Code__r.Product_Line_NS__c, m.Product_Code__r.ProductCode, 
									m.Product_Code__r.Package_Classification__c, m.Product_Code__r.Name, m.Product_Code__r.Is_Package__c, m.Product_Code__r.IsActive,
									 m.Product_Code__r.Id, m.Product_Code__r.Family, m.Product_Code__r.Description From m_Product_UOM__c m
									 where m.Product_Code__r.IsActive=true and m.m_LU_UOM__c<>null/* and
								  	m.Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode)*/]){
					
				if (productMap.containsKey(pr2.Product_Code__r.Id)){
					ProductMatrixObject pmox=productMap.get(pr2.Product_Code__r.Id);
					pmox.licenseUnitList.add(pr2.m_LU_UOM__c);
					continue;
				}
				
				if (!pricingConfigObj.setOfProductWithActivePricing.contains(pr2.Product_Code__r.Id))
					continue;
					
				ProductMatrixObject pmo=new ProductMatrixObject();
				pmo.productCode=pr2.Product_Code__r.ProductCode;
				pmo.sfdcId=pr2.Product_Code__r.Id;
				pmo.productName=pr2.Product_Code__r.Name;
				pmo.productDesc=pr2.Product_Code__r.Description;
				pmo.packageDisplayOrder=-1;
				
				pmo.licenseUnitList.add(pr2.m_LU_UOM__c);
				pmo.quantityList.licenseUnit=pr2.m_LU_UOM__c;
				pmo.quantityList.minQty=integer.valueOf(pr2.License_Min_Qty__c);
				pmo.quantityList.maxQty=integer.valueOf(pr2.License_Max_Qty__c);
				pmo.quantityList.recommendedQty=pmo.quantityList.minQty;
				
				pmo.termUnit=pr2.m_Term_Unit__c;
				pmo.termUnitMin=integer.valueOf(pr2.Term_Min_Qty__c);
				pmo.termUnitMax=integer.valueOf(pr2.Term_Max_Qty__c);
				pmo.price=this.pricingConfigObj.fetchPricingForProduct(pmo.sfdcId,pmo.quantityList.licenseUnit,1);
				
				pmo.upfrontPayment=this.pricingConfigObj.fetchUpfrontPayment(pmo.sfdcId,pmo.quantityList.licenseUnit,1);
				pmo.recurringPayment=this.pricingConfigObj.fetchRecurringPayment(pmo.sfdcId,pmo.quantityList.licenseUnit,1);
				pmo.qty=1;
				pmo.orgQty=1;
				pmo.packageType=pr2.Product_Code__r.m_Package_Type__c;
				pmo.packageClassification=pr2.Product_Code__r.Package_Classification__c;
				pmo.isPackage=pr2.Product_Code__r.Is_Package__c;
				
				for (map<string,ProductMatrixObject> pmoList:productMatrix.values()){
					if (pmoList.containsKey(pmo.sfdcId)){
						ProductMatrixObject pmo1=(ProductMatrixObject) pmoList.get(pmo.sfdcId);
						pmo.preReq=pmo1.preReq;
						pmo.exclude=pmo1.exclude;
						pmo.fullProductList=pmo1.fullProductList;
						break;	
					}
				}
				productMap.put(pmo.sfdcId,pmo);
			}
			
			if (productMap.values().size()<1)
				throw new CommonException('No Active Product Available.',CommonExceptionType.NoActiveProductAvailable);
			
		}
		
		/* instantiate the product Matrix object */
		private void buildProductMatrix(){
			string packageClasses='';
			
			string countryCode=BusinessRuleObj.actualCountryCode(currentOpp.Billing_Country__c);
			for (m_Product_Relationship__c prc:[Select m.Product_Code__r.Package_Classification__c,m.Product_Code__r.m_Package_display_order__c,m.Related_Product_Code__r.Unit_Of_Measure__c,
								m.License_Recommended__c,m.License_Min_Qty__c, m.License_Max_Qty__c,
								m.Relation_Type__c, m.Related_Product_Code__r.Family, m.Related_Product_Code__r.m_Package_Type__c,
								m.Related_Product_Code__r.IsActive, m.Related_Product_Code__r.ProductCode,m.Related_Product_Code__r.Is_Package__c,
								 m.Related_Product_Code__r.Name, m.Related_Product_Code__r.Id, m.Related_Product_Code__r.Description,
								  m.Related_Product_Code__c, m.Product_Code__r.Is_Package__c, m.Product_Code__r.Unit_Of_Measure__c,
								  m.Product_Code__r.Family,m.Product_Code__r.Name, m.Product_Code__r.IsActive, m.Product_Code__r.Description, 
								  m.Product_Code__r.ProductCode, m.Product_Code__r.Id, m.Product_Code__r.m_Package_Type__c, m.m_module_display_order__c,
								  m.Product_Code__c, m.Id From m_Product_Relationship__c m
								  where m.Product_Code__r.IsActive=true and m.Related_Product_Code__r.IsActive=true and
								  	m.Product_Code__r.Is_Package__c=true and m.Product_Code__r.m_Package_Type__c in ('Ala Carte','All')/* and
								  	m.Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode) and
								  	m.Related_Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode)*/]){
				
				if (prc.Product_Code__r.Package_Classification__c==null)
					continue;
				
				
				if (!pricingConfigObj.setOfProductWithActivePricing.contains(prc.Product_Code__c)||
					!pricingConfigObj.setOfProductWithActivePricing.contains(prc.Related_Product_Code__c))
					continue;	
							
				packageClasses=prc.Product_Code__r.Package_Classification__c;
				
				for (string packageClass:packageClasses.split(';', -2)){
						
					if (!productMatrix.containsKey(packageClass)){ 
						productMatrix.put(packageClass,new map<string,ProductMatrixObject>());
					}
	
					map<string,ProductMatrixObject> pmoList=productMatrix.get(packageClass);
					if (!pmoList.containsKey(prc.Product_Code__r.Id)){
						ProductMatrixObject pmo=new ProductMatrixObject();
						pmo.productCode=prc.Product_Code__r.ProductCode;
						pmo.packageClassification=packageClass;
						pmo.sfdcId=prc.Product_Code__r.Id;
						pmo.productDesc=prc.Product_Code__r.Description;
						pmo.productName=prc.Product_Code__r.Name;
						pmo.price=-1;//pricingConfigObj.fetchPricingForProduct(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.upfrontPayment=-1;//pricingConfigObj.fetchUpfrontPayment(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.recurringPayment=-1;//pricingConfigObj.fetchRecurringPayment(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.licenseUnitList.add(currentOpp.m_License_Unit__c);
						
						pmo.quantityList.licenseUnit=currentOpp.m_License_Unit__c;
						pmo.packageDisplayOrder=integer.valueOf(prc.Product_Code__r.m_Package_display_order__c);
						pmo.qty=0;
						
						pmo.packageType=prc.Product_Code__r.m_Package_Type__c;
						
						pmoList.put(pmo.sfdcId,pmo);
								
						/* Add this package into the Ala Carte Ids */
						if (prc.Product_Code__r.m_Package_Type__c=='Ala Carte')
							aLaCarteIds.put(packageClass,prc.Product_Code__r.Id);
					}
				}
			}
		}
		
		private map<string,QuantityType> loadPreReqProductsList(string productId){
			map<string,QuantityType> preReqList=new  map<string,QuantityType>();
			string countryCode=BusinessRuleObj.actualCountryCode(currentOpp.Billing_Country__c);
			for (m_Product_Relationship__c prc:[Select m.Related_Product_Code__r.Id, m.Id, m.License_Recommended__c,
													m.License_Max_Qty__c,m.License_Min_Qty__c, m.License_Unit__c
													From m_Product_Relationship__c m
								  where m.Product_Code__c=:productId and m.Related_Product_Code__r.IsActive=true 
								   and m.Relation_Type__c='Pre-Req' /*and
								  	m.Related_Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode)*/]){
				
				if (!pricingConfigObj.setOfProductWithActivePricing.contains(prc.Related_Product_Code__r.Id))
					continue;				
				
				preReqList.put(prc.Related_Product_Code__r.Id,
								new QuantityType(integer.valueOf(prc.License_Recommended__c==null?1:prc.License_Recommended__c),
														integer.valueOf(prc.License_Max_Qty__c==null?1:prc.License_Max_Qty__c),
														integer.valueOf(prc.License_Min_Qty__c==null?1:prc.License_Min_Qty__c),
														prc.License_Unit__c));
			}
			
			return preReqList;
		}
		
		/* instantiate the product Comparison object */
		private void buildProductComparisonMatrix(map<string,string> bs, string pClass){
			string packageClasses='';
			productComparisonMatrix=new map<string,ProductMatrixObject>();
			map<string,PriceScheduleType> pstList=new map<string,PriceScheduleType>();
			
			string countryCode=BusinessRuleObj.actualCountryCode(currentOpp.Billing_Country__c);
			for (m_Product_Relationship__c prc:[Select m.Product_Code__r.Package_Classification__c,m.Product_Code__r.m_Package_display_order__c,m.Related_Product_Code__r.Unit_Of_Measure__c,
								m.License_Recommended__c,m.License_Min_Qty__c, m.License_Max_Qty__c,
								m.Relation_Type__c, m.Related_Product_Code__r.Family, m.Related_Product_Code__r.m_Package_Type__c,
								m.Related_Product_Code__r.IsActive, m.Related_Product_Code__r.ProductCode,m.Related_Product_Code__r.Is_Package__c,
								 m.Related_Product_Code__r.Name, m.Related_Product_Code__r.Id, m.Related_Product_Code__r.Description,m.License_Unit__c,
								  m.Related_Product_Code__c, m.Product_Code__r.Is_Package__c, m.Product_Code__r.Unit_Of_Measure__c,
								  m.Product_Code__r.Family,m.Product_Code__r.Name, m.Product_Code__r.IsActive, m.Product_Code__r.Description, 
								  m.Product_Code__r.ProductCode, m.Product_Code__r.Id, m.Product_Code__r.m_Package_Type__c, m.m_module_display_order__c,
								  m.Product_Code__c, m.Id From m_Product_Relationship__c m
								  where m.Product_Code__r.IsActive=true and m.Related_Product_Code__r.IsActive=true and
								  	m.Product_Code__r.Package_Classification__c<>null and
								  	m.Product_Code__r.Is_Package__c=true and m.Product_Code__r.m_Package_Type__c in ('Ala Carte','All','Pick 1','Pick N of M') /*and
								  	m.Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode) and
								  	m.Related_Product_Code__c in (select pr.Product_Code__c from m_Product_Regions__c pr where pr.Region__c=:countryCode)*/]){
				
				if (!bs.containsKey(prc.Product_Code__r.Id)&&
					prc.Product_Code__r.m_Package_Type__c!='Pick 1'&&
					prc.Product_Code__r.m_Package_Type__c!='Pick N of M'&&
					prc.Product_Code__r.m_Package_Type__c!='Ala Carte') continue;
				
				//if (prc.Product_Code__r.Package_Classification__c==null) continue;//packageClasses='Misc';
				
				//if (prc.Product_Code__r.m_Package_Type__c != 'Ala Carte'){
				if (!pricingConfigObj.setOfProductWithActivePricing.contains(prc.Product_Code__r.Id)||
					!pricingConfigObj.setOfProductWithActivePricing.contains(prc.Related_Product_Code__r.Id))
					continue;						
				//}
			
				
				packageClasses=prc.Product_Code__r.Package_Classification__c;
					
				for (string packageClass:packageClasses.split(';', -2)){
					if (packageClass!=pClass) continue;
					
					if (!productComparisonMatrix.containsKey(prc.Product_Code__r.Id)){
						ProductMatrixObject pmo=new ProductMatrixObject();
						pmo.productCode=prc.Product_Code__r.ProductCode;
						pmo.packageClassification=packageClass;
						pmo.sfdcId=prc.Product_Code__r.Id;
						pmo.productDesc=prc.Product_Code__r.Description;
						pmo.productName=prc.Product_Code__r.Name;
						pmo.price=-1;//pricingConfigObj.fetchPricingForProduct(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.upfrontPayment=-1;//pricingConfigObj.fetchUpfrontPayment(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.recurringPayment=-1;//pricingConfigObj.fetchRecurringPayment(pmo.sfdcId,currentOpp.m_License_Unit__c);
						pmo.licenseUnitList.add(currentOpp.m_License_Unit__c);
						
						pmo.packageDisplayOrder=integer.valueOf(prc.Product_Code__r.m_Package_display_order__c);
						pmo.qty=integer.valueOf(currentOpp.Number_of_Users__c);
						
						
						pstList.put(pmo.sfdcId,new PriceScheduleType(pmo.sfdcId,pmo.quantityList.licenseUnit,pmo.qty));
						
						pmo.quantityList.recommendedQty=integer.valueOf(currentOpp.Number_of_Users__c);
						pmo.quantityList.maxQty=1;
						pmo.quantityList.minQty=1;
						pmo.quantityList.licenseUnit=currentOpp.m_License_Unit__c;
						//pmo.recommendedQty=integer.valueOf(prc.License_Recommended__c==null?1:prc.License_Recommended__c);
						pmo.packageType=prc.Product_Code__r.m_Package_Type__c;
						productComparisonMatrix.put(pmo.sfdcId,pmo);
					}
				
					ProductMatrixObject pmo=productComparisonMatrix.get(prc.Product_Code__r.Id);
					
					if (prc.Relation_Type__c=='Contains'||
						prc.Relation_Type__c=='Options'){
						ProductRelationshipMatrixObject prmo=new ProductRelationshipMatrixObject();
						prmo.productCode=prc.Related_Product_Code__r.ProductCode;
						prmo.packageClassification=packageClass;
						prmo.sfdcId=prc.Related_Product_Code__r.Id;
						prmo.productDesc=prc.Related_Product_Code__r.Description;
						prmo.productName=prc.Related_Product_Code__r.Name;
						prmo.moduleDisplayOrder=integer.valueOf(prc.m_Module_display_order__c);
						prmo.packageType=prc.Related_Product_Code__r.m_Package_Type__c;
						prmo.relationshipType=prc.Relation_Type__c;
						
						//if (prc.Relation_Type__c=='Contains'){
							//prmo.quantityList.licenseUnit=currentOpp.m_License_Unit__c;
						//	prmo.quantityList=new QuantityType(pmo.quantityList);
							//prmo.quantityList.licenseUnit=currentOpp.m_License_Unit__c;
						//	prmo.qty=pmo.qty;
							
						//}
						//else{
							
						try {
							prmo.quantityList=bizObj.getQuantityListByProdRelORUOM(integer.valueOf(prc.License_Max_Qty__c),
																					integer.valueOf(prc.License_Min_Qty__c),
																					integer.valueOf(prc.License_Recommended__c), 
																					prc.License_Unit__c, prmo.sfdcId);
							
						}
						catch(CommonException cEx){
							//addCommonMessage(ApexPages.Severity.WARNING,'The \'' + prmo.productName + 
							//				'\' does not contain any available quantities please contact Product Management team for more details.');
					
							continue;
						}
							
						prmo.qty=getOutRangeQty(currentOpp.m_License_Unit__c, prmo.quantityList.licenseUnit,
											pmo.qty, prmo.quantityList.maxQty, prmo.quantityList.minQty, 
											prmo.quantityList.recommendedQty);
						
						prmo.licenseUnitList.add(prmo.quantityList.licenseUnit);
						
						prmo.price=-1;//pricingConfigObj.fetchPricingForProduct(prmo.sfdcId,currentOpp.m_License_Unit__c);
						prmo.upfrontPayment=-1;//pricingConfigObj.fetchUpfrontPayment(prmo.sfdcId,currentOpp.m_License_Unit__c);
						prmo.recurringPayment=-1;//pricingConfigObj.fetchRecurringPayment(prmo.sfdcId,currentOpp.m_License_Unit__c);
					
						pmo.fullProductList.put(prc.Related_Product_Code__r.Id, prmo);
						
						if (pmo.packageType=='Ala Carte'){
							pstList.put(prmo.sfdcId,new PriceScheduleType(prmo.sfdcId,prmo.quantityList.licenseUnit,prmo.quantityList.recommendedQty));
							/* Ala Carte Only 
							prmo.price=pricingConfigObj.fetchPricingForProduct(prmo.sfdcId,currentOpp.m_License_Unit__c);
							prmo.upfrontPayment=pricingConfigObj.fetchUpfrontPayment(prmo.sfdcId,currentOpp.m_License_Unit__c);
							prmo.recurringPayment=pricingConfigObj.fetchRecurringPayment(prmo.sfdcId,currentOpp.m_License_Unit__c);
							*/
						}
					}
					
					if (prc.Relation_Type__c=='Pre-Req'){
						if (!productMap.containsKey(prc.Related_Product_Code__r.Id))
							continue;
							
						try {
							pmo.preReq.put(prc.Related_Product_Code__r.Id,
											bizObj.getQuantityListByProdRelORUOM(integer.valueOf(prc.License_Max_Qty__c),
																				integer.valueOf(prc.License_Min_Qty__c),
																				integer.valueOf(prc.License_Recommended__c), 
																				prc.License_Unit__c, prc.Related_Product_Code__c));
								
						}
						catch(CommonException cEx){
							addCommonMessage(ApexPages.Severity.WARNING,'The product code \'' +  prc.Related_Product_Code__r.ProductCode + 
											'\' does not contain any available quantities please contact Product Management team for more details.');
					
							continue;
						}							
						ProductMatrixObject pmoy=new ProductMatrixObject(productMap.get(prc.Related_Product_Code__r.Id));
						// START - Changed by Anupam for debugging the pricing optimization issue
						if (!pstList.containsKey(prc.Related_Product_Code__r.Id)){
							pstList.put(prc.Related_Product_Code__r.Id,new PriceScheduleType(prc.Related_Product_Code__r.Id,
																							pmoy.quantityList.licenseUnit,
																							pmo.quantityList.recommendedQty));
						}													
						continue;
					}
					
					if (prc.Relation_Type__c=='Excludes'){
						pmo.exclude.add(prc.Related_Product_Code__r.Id);
						continue;
					}
				
				}
				
			}
						
			/* Reload the required pricing data */
			pricingConfigObj.loadPricingMap(pstList);
			
			/* Dispensing the pricing into each product */
			for (ProductMatrixObject pmo:productComparisonMatrix.values()){
				pmo.price=pricingConfigObj.fetchPricingForProduct(pmo.sfdcId,currentOpp.m_License_Unit__c,integer.valueOf(currentOpp.Number_Of_Users__c));
				pmo.upfrontPayment=pricingConfigObj.fetchUpfrontPayment(pmo.sfdcId,currentOpp.m_License_Unit__c,integer.valueOf(currentOpp.Number_Of_Users__c));
				pmo.recurringPayment=pricingConfigObj.fetchRecurringPayment(pmo.sfdcId,currentOpp.m_License_Unit__c,integer.valueOf(currentOpp.Number_Of_Users__c));
				
				if (pmo.packageType!='Ala Carte') continue;
				for (ProductRelationshipMatrixObject prmo:pmo.getFullProductList){
					
					/* get real time pricing. License Unit is no longer with opportnity per Sarat */
					if (currentOpp.m_License_Unit__c==prmo.quantityList.licenseUnit)
						prmo.price=pricingConfigObj.fetchPricingForProduct(prmo.sfdcId,prmo.quantityList.licenseUnit,prmo.qty);
					else
						prmo.price=0;
						
					if (prmo.price<0){
						pmo.fullProductList.remove(prmo.sfdcId);
						/* Remove the message per discussion
							addCommonMessage(ApexPages.Severity.WARNING,'The ' + prmo.productName + ' has no matching pricing found for this license unit: ' + prmo.licenseUnit + 
											' Debug: prmo.sfdcId: ' + prmo.sfdcId + ', currentOpp.Number_Of_Users__c: ' + currentOpp.Number_Of_Users__c + ', currentOpp.m_License_Unit__c: ' + currentOpp.m_License_Unit__c);
						*/
						
						continue;
					}	
				}		
			}
			
			/* building the complete list of product matrix */
			string thisAlaCarte=aLaCarteIds.get(pClass);
				
			if (thisAlaCarte==null){
				throw new CommonException('The Ala-Carte package for this package classification- ' + pClass +
											' does not have active pricing defined. Please contact Product Management team for details.',CommonExceptionType.NoAlaCarteAvailable);
			}
			
			if (productComparisonMatrix.containsKey(thisAlaCarte)){
            	ProductMatrixObject pmox=(ProductMatrixObject)productComparisonMatrix.get(thisAlaCarte); 
	            
	            //Looping the actual package
	            for (ProductMatrixObject pmo1:productComparisonMatrix.values()){
					if (pmo1.sfdcId==thisAlaCarte||pmo1.packageType=='Pick 1'||pmo1.packageType=='Pick N of M') continue;
							
					map<string,ProductRelationshipMatrixObject> op1=
						pmo1.FullProductList.clone();
					
					map<string,ProductRelationshipMatrixObject> op2=
						new map<string,ProductRelationshipMatrixObject>(); 
					
					//Looping the Ala Carte	
	                for (ProductRelationshipMatrixObject prmo:pmox.getFullProductList){
						ProductRelationshipMatrixObject op3=
							new ProductRelationshipMatrixObject(prmo);
							
						integer seq=op3.moduleDisplayOrder;	
						/* fixing the included/option issue from Order2C */	
						op3.isIncluded=false;
						if (op1.containsKey(op3.sfdcId)){
							op3=new ProductRelationshipMatrixObject(op1.get(prmo.sfdcId));
							op3.isIncluded=(op3.relationshipType=='Contains'?true:false);
							op3.moduleDisplayOrder=seq;
						}
						
						op2.put(op3.sfdcId,op3);
					}
					
					pmo1.fullProductList=op2;
	
				}
			}
			
		}
	}
	
/* End Product Configurator Object	*/

/* Begin Address Object */
	public class AddressObj extends CommonLib {
		
		public AddressObj(){}
		public boolean isDuplicateBillAddress=false;
		public boolean isDuplicateShipAddress=false;
		public boolean duplicateBillAddressInAccount=false;
		
		public virtual void addressValidation(Address__c addrs){
			
			String na = addrs.Street_1__c + ', ' + addrs.City__c + ', ' +	addrs.State__c + ' ' + addrs.Zip__c + ', ' + addrs.Country__c;			     
		    
		    if (duplicateAddrList(addrs).size()>0){
				if (addrs.Address_Type__c=='Bill To')
					isDuplicateBillAddress=true;					
				else
					isDuplicateBillAddress=false;
			}
			else
				isDuplicateBillAddress=false;
			
			if (duplicateAddrListSameAddressType(addrs).size()>0){
				if (addrs.Address_Type__c=='Ship To')
					isDuplicateShipAddress=true;
				else
					isDuplicateShipAddress=false;
			}
			else
				isDuplicateShipAddress=false;
			
			duplicateBillAddressInAccount=false;
			for (Address__c addr : accountAddressList(addrs.Account_del__c)){
				if (addrs.Address_Type__c=='Bill To'&&addr.Address_Type__c=='Bill To'){
					duplicateBillAddressInAccount=true;
					break;	
				}
			}
		}
		
		public Map<integer,AddressType> parseGoogleGeocodingAddress(string inputAddress){
			try {
				Map<string,object> x = (Map<string,object>) JSON.deserializeUntyped(googleAPI(inputAddress));
				Map<integer,AddressType> addressList = new Map<integer,AddressType>();
				if (x.get('status')=='ZERO_RESULTS')
					return null;
					
				List<Object> y = (List<Object>)x.get('results');
				
				for (integer i=0;i<y.size();i++){
					Map<string,Object> z1 = (Map<string,Object>) y[i];
					List<Object> addr = (List<Object>)z1.get('address_components');
					AddressType gAddr = new AddressType();
					for (integer j=0;j<addr.size();j++){
						Map<string, Object> addrPart = (Map<string, Object>)addr[j];
						List<Object> types = (List<Object>)addrPart.get('types'); 
						
						if (types[0]=='street_number')
							gAddr.street_number=(string)addrPart.get('short_name');
							
						if (types[0]=='route')
							gAddr.route=(string)addrPart.get('short_name');
							
						if (types[0]=='locality')
							gAddr.city=(string)addrPart.get('short_name');
						
						if (types[0]=='administrative_area_level_1')
							gAddr.state=(string)addrPart.get('short_name');
						
						if (types[0]=='administrative_area_level_2')
							gAddr.county=(string)addrPart.get('short_name');
						
						if (types[0]=='postal_code')
							gAddr.zip=(string)addrPart.get('short_name');
							
						if (types[0]=='country')
							gAddr.country=(string)addrPart.get('short_name');	
									  
					}
					gAddr.street=gAddr.street_number + ' ' + gAddr.route; 
					gAddr.id=i;					
					addressList.put(i,gAddr);
				}
				return addressList;
			}
			catch (Exception ex){
				notifyStandardExceptionViaEmail('Error Parsing Google Geocode Addresses',ex,CommonObj.developerEmails);
				return null;
			}
		}
		
		public List<Address__c> duplicateAddrList(Address__c newAddress){
			return [select a.Id, a.Zip__c, a.Street_1__c, a.Name, a.Street_2__c, a.State__c, a.County__c, a.Country__c, a.City__c, a.Address_Type__c, a.Account_Del__c, a.Account_Del__r.Name From Address__c a
		    								where a.Street_1__c=:newAddress.Street_1__c and a.City__c=:newAddress.City__c 
		    																			and a.State__c=:newAddress.State__c
		    																			and a.Zip__c=:newAddress.Zip__c
		    																			//and a.Address_Type__c=:newAddress.Address_Type__c 
		    																			//and a.Id<>:newAddress.Id
		    																			];
		}
		
		public List<Address__c> duplicateAddrListSameAddressType(Address__c newAddress){
			return [select a.Id, a.Zip__c, a.Street_1__c, a.Name, a.Street_2__c, a.State__c, a.County__c, a.Country__c, a.City__c, a.Address_Type__c, a.Account_Del__c, a.Account_Del__r.Name From Address__c a
		    								where a.Street_1__c=:newAddress.Street_1__c and a.City__c=:newAddress.City__c 
		    																			and a.State__c=:newAddress.State__c
		    																			and a.Zip__c=:newAddress.Zip__c
		    																			and a.Address_Type__c=:newAddress.Address_Type__c
		    																			//and a.Id<>:newAddress.Id
		    																			];
		}
		
		public List<Address__c> accountAddressList(string accountId){
			return [select a.Id, a.Zip__c, a.Street_1__c, a.Name, a.Street_2__c, a.State__c, a.County__c, a.Country__c, a.City__c, a.Address_Type__c, a.Account_Del__c, a.Account_Del__r.Name From Address__c a
		    								where a.Account_Del__c=:accountId];
		}
		
	}
/* End Address Object */

}